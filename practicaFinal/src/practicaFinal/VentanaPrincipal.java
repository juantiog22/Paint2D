/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package practicaFinal;


import java.awt.BasicStroke;
import java.awt.Color;
import java.awt.Stroke;
import java.io.File;
import java.util.StringTokenizer;
import javax.swing.JFileChooser;
import java.awt.image.BufferedImage;
import javax.imageio.ImageIO;
import javax.swing.JOptionPane;
import javax.swing.filechooser.FileNameExtensionFilter;
import java.awt.Graphics2D;
import java.awt.Transparency;
import java.awt.color.ColorSpace;
import java.awt.geom.AffineTransform;
import java.awt.image.AffineTransformOp;
import java.awt.image.BandCombineOp;
import java.awt.image.ByteLookupTable;
import java.awt.image.ColorConvertOp;
import java.awt.image.ColorModel;
import java.awt.image.ComponentColorModel;
import java.awt.image.ConvolveOp;
import java.awt.image.DataBuffer;
import java.awt.image.Kernel;
import java.awt.image.LookupOp;
import java.awt.image.LookupTable;
import java.awt.image.RescaleOp;
import java.awt.image.WritableRaster;
import sm.image.KernelProducer;
import sm.image.LookupTableProducer;
import sm.image.EqualizationOp;
import sm.image.KernelProducer;
import sm.image.LookupTableProducer;
import sm.image.SepiaOp;
import sm.image.TintOp;
import sm.jdrg.imagenes.PosterizacionOp;
import sm.jdrg.imagenes.FiltroRojoOP;
import sm.sound.SMClipPlayer;
import sm.sound.SMPlayer;
import sm.sound.SMRecorder;
import static sun.audio.AudioPlayer.player;
import uk.co.caprica.vlcj.player.MediaPlayer;
import uk.co.caprica.vlcj.player.MediaPlayerEventAdapter;
import com.github.sarxos.webcam.Webcam;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.IOException;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.sound.sampled.LineEvent;
import javax.sound.sampled.LineListener;
import javax.swing.Timer;
import sm.jdrg.imagenes.PixelOp;
import sm.jdrg.iu.Lienzo2Dimagen;
import sm.sound.SMSoundRecorder;

/**
 *Clase VentanaPrincipal. Contiene la interfaz de la aplicación. Contiene la 
 * gestion de eventos de todos los botones y maneja las demás ventanas internas.
 * @author jdrgj
 */
public class VentanaPrincipal extends javax.swing.JFrame {

    
    /**
     * Creates new form VentanaPrincipal
     */
    public VentanaPrincipal() {
        initComponents();
    }
    
        private BufferedImage imgFuente=null;
    SMPlayer player = null;
    SMSoundRecorder recorder = null;
    SMClipPlayer play = null;
    Timer timer;
    int segundos;
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jSeparator6 = new javax.swing.JToolBar.Separator();
        bHerramientas = new javax.swing.JToolBar();
        bNuevo1 = new javax.swing.JButton();
        bAbrir1 = new javax.swing.JButton();
        bGuardar1 = new javax.swing.JButton();
        jSeparator1 = new javax.swing.JToolBar.Separator();
        bPunto = new javax.swing.JToggleButton();
        bLinea = new javax.swing.JToggleButton();
        bRectangulo = new javax.swing.JToggleButton();
        bElipse = new javax.swing.JToggleButton();
        jSeparator2 = new javax.swing.JToolBar.Separator();
        jPanel2 = new javax.swing.JPanel();
        bNegro = new javax.swing.JButton();
        bBlanco = new javax.swing.JButton();
        bRojo = new javax.swing.JButton();
        bVerde = new javax.swing.JButton();
        bAzul = new javax.swing.JButton();
        bAmarillo = new javax.swing.JButton();
        jSeparator3 = new javax.swing.JToolBar.Separator();
        colorTrazo = new javax.swing.JComboBox<>();
        colorRelleno = new javax.swing.JComboBox<>();
        bTransparencia = new javax.swing.JButton();
        bRelleno = new javax.swing.JToggleButton();
        bAlisar = new javax.swing.JToggleButton();
        bDiscontinuidad = new javax.swing.JCheckBox();
        jPanel3 = new javax.swing.JPanel();
        jSlider3 = new javax.swing.JSlider();
        jSeparator5 = new javax.swing.JToolBar.Separator();
        bPlay = new javax.swing.JButton();
        bStop = new javax.swing.JToggleButton();
        jComboBox3 = new javax.swing.JComboBox<>();
        jSeparator7 = new javax.swing.JToolBar.Separator();
        bGrabar = new javax.swing.JToggleButton();
        tiempo = new javax.swing.JLabel();
        jButton23 = new javax.swing.JButton();
        jSeparator8 = new javax.swing.JToolBar.Separator();
        bCamara = new javax.swing.JButton();
        bCaptura = new javax.swing.JButton();
        jSeparator9 = new javax.swing.JToolBar.Separator();
        bDuplicar = new javax.swing.JButton();
        barraEstado = new javax.swing.JLabel();
        jPanel1 = new javax.swing.JPanel();
        pImagen1 = new javax.swing.JPanel();
        panel1 = new javax.swing.JPanel();
        brillo = new javax.swing.JSlider();
        panel2 = new javax.swing.JPanel();
        seleccionarMascara1 = new javax.swing.JComboBox();
        panel3 = new javax.swing.JPanel();
        bNormal = new javax.swing.JButton();
        bIluminacion = new javax.swing.JButton();
        bOscurecimiento = new javax.swing.JButton();
        panel5 = new javax.swing.JPanel();
        ShowBandas1 = new javax.swing.JButton();
        EspacioColor1 = new javax.swing.JComboBox();
        panel6 = new javax.swing.JPanel();
        sliderRotacion1 = new javax.swing.JSlider();
        pRotacionFija1 = new javax.swing.JPanel();
        b90 = new javax.swing.JButton();
        b180 = new javax.swing.JButton();
        b270 = new javax.swing.JButton();
        panel4 = new javax.swing.JPanel();
        bBandcombine1 = new javax.swing.JButton();
        bCuadratica1 = new javax.swing.JButton();
        bTintado = new javax.swing.JButton();
        bSepia = new javax.swing.JButton();
        bEcualizacion = new javax.swing.JButton();
        bFiltro = new javax.swing.JButton();
        Pixel = new javax.swing.JButton();
        posterizacion = new javax.swing.JSlider();
        panel7 = new javax.swing.JPanel();
        bAmpliar = new javax.swing.JButton();
        bdisminuir = new javax.swing.JButton();
        desktop = new javax.swing.JDesktopPane();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        bNuevo = new javax.swing.JMenuItem();
        bAbrir = new javax.swing.JMenuItem();
        bGuardar = new javax.swing.JMenuItem();
        jMenuItem1 = new javax.swing.JMenuItem();
        jRadioButtonMenuItem1 = new javax.swing.JRadioButtonMenuItem();
        jRadioButtonMenuItem2 = new javax.swing.JRadioButtonMenuItem();
        jMenu2 = new javax.swing.JMenu();
        bEdicion = new javax.swing.JCheckBoxMenuItem();
        mImagen = new javax.swing.JMenu();
        rescaleOp = new javax.swing.JMenuItem();
        convolveOp = new javax.swing.JMenuItem();
        affineTransformOp = new javax.swing.JMenuItem();
        lookupOp = new javax.swing.JMenuItem();
        colorConvertOp = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        bHerramientas.setRollover(true);

        bNuevo1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/iconos/nuevo.png"))); // NOI18N
        bNuevo1.setToolTipText("Nuevo");
        bNuevo1.setFocusable(false);
        bNuevo1.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        bNuevo1.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        bNuevo1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bNuevo1ActionPerformed(evt);
            }
        });
        bHerramientas.add(bNuevo1);

        bAbrir1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/iconos/abrir.png"))); // NOI18N
        bAbrir1.setToolTipText("Abrir");
        bAbrir1.setFocusable(false);
        bAbrir1.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        bAbrir1.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        bAbrir1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bAbrir1ActionPerformed(evt);
            }
        });
        bHerramientas.add(bAbrir1);

        bGuardar1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/iconos/guardar.png"))); // NOI18N
        bGuardar1.setToolTipText("Guardar");
        bGuardar1.setFocusable(false);
        bGuardar1.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        bGuardar1.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        bGuardar1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bGuardar1ActionPerformed(evt);
            }
        });
        bHerramientas.add(bGuardar1);
        bHerramientas.add(jSeparator1);

        bPunto.setIcon(new javax.swing.ImageIcon(getClass().getResource("/iconos/punto.png"))); // NOI18N
        bPunto.setToolTipText("Punto");
        bPunto.setFocusable(false);
        bPunto.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        bPunto.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        bPunto.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bPuntoActionPerformed(evt);
            }
        });
        bHerramientas.add(bPunto);

        bLinea.setIcon(new javax.swing.ImageIcon(getClass().getResource("/iconos/linea.png"))); // NOI18N
        bLinea.setToolTipText("Línea");
        bLinea.setFocusable(false);
        bLinea.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        bLinea.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        bLinea.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bLineaActionPerformed(evt);
            }
        });
        bHerramientas.add(bLinea);

        bRectangulo.setIcon(new javax.swing.ImageIcon(getClass().getResource("/iconos/rectangulo.png"))); // NOI18N
        bRectangulo.setToolTipText("Rectángulo");
        bRectangulo.setFocusable(false);
        bRectangulo.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        bRectangulo.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        bRectangulo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bRectanguloActionPerformed(evt);
            }
        });
        bHerramientas.add(bRectangulo);

        bElipse.setIcon(new javax.swing.ImageIcon(getClass().getResource("/iconos/elipse.png"))); // NOI18N
        bElipse.setToolTipText("Elipse");
        bElipse.setFocusable(false);
        bElipse.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        bElipse.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        bElipse.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bElipseActionPerformed(evt);
            }
        });
        bHerramientas.add(bElipse);
        bHerramientas.add(jSeparator2);

        bNegro.setBackground(new java.awt.Color(0, 0, 0));
        bNegro.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bNegroActionPerformed(evt);
            }
        });

        bBlanco.setBackground(new java.awt.Color(255, 255, 255));
        bBlanco.setForeground(new java.awt.Color(255, 255, 255));
        bBlanco.setAutoscrolls(true);
        bBlanco.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bBlancoActionPerformed(evt);
            }
        });

        bRojo.setBackground(new java.awt.Color(255, 0, 0));
        bRojo.setForeground(new java.awt.Color(255, 0, 0));
        bRojo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bRojoActionPerformed(evt);
            }
        });

        bVerde.setBackground(new java.awt.Color(0, 153, 0));
        bVerde.setForeground(new java.awt.Color(0, 153, 0));
        bVerde.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bVerdeActionPerformed(evt);
            }
        });

        bAzul.setBackground(new java.awt.Color(0, 0, 255));
        bAzul.setForeground(new java.awt.Color(0, 51, 255));
        bAzul.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bAzulActionPerformed(evt);
            }
        });

        bAmarillo.setBackground(new java.awt.Color(255, 255, 0));
        bAmarillo.setForeground(new java.awt.Color(255, 255, 0));
        bAmarillo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bAmarilloActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(bBlanco, javax.swing.GroupLayout.DEFAULT_SIZE, 48, Short.MAX_VALUE)
                    .addComponent(bNegro, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(bRojo, javax.swing.GroupLayout.PREFERRED_SIZE, 48, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(bVerde, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(bAzul, javax.swing.GroupLayout.PREFERRED_SIZE, 48, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(bAmarillo, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(bAzul, javax.swing.GroupLayout.PREFERRED_SIZE, 21, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(bNegro, javax.swing.GroupLayout.PREFERRED_SIZE, 21, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(bRojo, javax.swing.GroupLayout.PREFERRED_SIZE, 21, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(bAmarillo, javax.swing.GroupLayout.DEFAULT_SIZE, 21, Short.MAX_VALUE)
                    .addComponent(bVerde, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(bBlanco, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        bNegro.getAccessibleContext().setAccessibleName("bAzul");
        bNegro.getAccessibleContext().setAccessibleDescription("");

        bHerramientas.add(jPanel2);
        bHerramientas.add(jSeparator3);

        colorTrazo.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "negro", "rojo", "verde", "azul", "amarillo", "blanco" }));
        colorTrazo.setBorder(javax.swing.BorderFactory.createTitledBorder("Color trazo"));
        colorTrazo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                colorTrazoActionPerformed(evt);
            }
        });
        bHerramientas.add(colorTrazo);

        colorRelleno.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "negro", "rojo", "verde", "azul", "amarillo", "blanco" }));
        colorRelleno.setBorder(javax.swing.BorderFactory.createTitledBorder("color relleno"));
        colorRelleno.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                colorRellenoActionPerformed(evt);
            }
        });
        bHerramientas.add(colorRelleno);

        bTransparencia.setIcon(new javax.swing.ImageIcon(getClass().getResource("/iconos/transparencia.png"))); // NOI18N
        bTransparencia.setToolTipText("Transparencia");
        bTransparencia.setFocusable(false);
        bTransparencia.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        bTransparencia.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        bTransparencia.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bTransparenciaActionPerformed(evt);
            }
        });
        bHerramientas.add(bTransparencia);

        bRelleno.setIcon(new javax.swing.ImageIcon(getClass().getResource("/iconos/rellenar.png"))); // NOI18N
        bRelleno.setToolTipText("Relleno");
        bRelleno.setFocusable(false);
        bRelleno.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        bRelleno.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        bRelleno.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bRellenoActionPerformed(evt);
            }
        });
        bHerramientas.add(bRelleno);

        bAlisar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/iconos/alisar.png"))); // NOI18N
        bAlisar.setToolTipText("Alisar");
        bAlisar.setFocusable(false);
        bAlisar.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        bAlisar.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        bAlisar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bAlisarActionPerformed(evt);
            }
        });
        bHerramientas.add(bAlisar);

        bDiscontinuidad.setText("Discontinuidad");
        bDiscontinuidad.setFocusable(false);
        bDiscontinuidad.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        bDiscontinuidad.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        bDiscontinuidad.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bDiscontinuidadActionPerformed(evt);
            }
        });
        bHerramientas.add(bDiscontinuidad);

        jPanel3.setBorder(javax.swing.BorderFactory.createTitledBorder("Grosor"));

        jSlider3.setMaximum(8);
        jSlider3.setMinimum(1);
        jSlider3.setToolTipText("Grosor");
        jSlider3.setValue(0);
        jSlider3.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                jSlider3StateChanged(evt);
            }
        });

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel3Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jSlider3, javax.swing.GroupLayout.PREFERRED_SIZE, 92, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addComponent(jSlider3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 7, Short.MAX_VALUE))
        );

        bHerramientas.add(jPanel3);
        bHerramientas.add(jSeparator5);

        bPlay.setIcon(new javax.swing.ImageIcon(getClass().getResource("/iconosSonido/play24x24.png"))); // NOI18N
        bPlay.setToolTipText("Empezar reproducción");
        bPlay.setFocusable(false);
        bPlay.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        bPlay.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        bPlay.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bPlayActionPerformed(evt);
            }
        });
        bHerramientas.add(bPlay);
        bPlay.getAccessibleContext().setAccessibleDescription("Empezar reproducción");

        bStop.setIcon(new javax.swing.ImageIcon(getClass().getResource("/iconosSonido/stop24x24.png"))); // NOI18N
        bStop.setToolTipText("Parar reproducción");
        bStop.setFocusable(false);
        bStop.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        bStop.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        bStop.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bStopActionPerformed(evt);
            }
        });
        bHerramientas.add(bStop);
        bStop.getAccessibleContext().setAccessibleDescription("Parar reproduccion");

        jComboBox3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBox3ActionPerformed(evt);
            }
        });
        bHerramientas.add(jComboBox3);
        bHerramientas.add(jSeparator7);

        bGrabar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/iconosSonido/record24x24.png"))); // NOI18N
        bGrabar.setToolTipText("Grabar");
        bGrabar.setAutoscrolls(true);
        bGrabar.setFocusable(false);
        bGrabar.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        bGrabar.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        bGrabar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bGrabarActionPerformed(evt);
            }
        });
        bHerramientas.add(bGrabar);

        tiempo.setText("00:00");
        bHerramientas.add(tiempo);

        jButton23.setIcon(new javax.swing.ImageIcon(getClass().getResource("/iconosSonido/stopRecord24x24.png"))); // NOI18N
        jButton23.setFocusable(false);
        jButton23.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        jButton23.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        jButton23.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton23ActionPerformed(evt);
            }
        });
        bHerramientas.add(jButton23);
        bHerramientas.add(jSeparator8);

        bCamara.setIcon(new javax.swing.ImageIcon(getClass().getResource("/iconosVideo/Camara.png"))); // NOI18N
        bCamara.setToolTipText("Webcam");
        bCamara.setFocusable(false);
        bCamara.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        bCamara.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        bCamara.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bCamaraActionPerformed(evt);
            }
        });
        bHerramientas.add(bCamara);

        bCaptura.setIcon(new javax.swing.ImageIcon(getClass().getResource("/iconosVideo/Capturar.png"))); // NOI18N
        bCaptura.setToolTipText("Captura");
        bCaptura.setFocusable(false);
        bCaptura.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        bCaptura.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        bCaptura.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bCapturaActionPerformed(evt);
            }
        });
        bHerramientas.add(bCaptura);
        bHerramientas.add(jSeparator9);

        bDuplicar.setText("Duplicar Imagen");
        bDuplicar.setFocusable(false);
        bDuplicar.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        bDuplicar.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        bDuplicar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bDuplicarActionPerformed(evt);
            }
        });
        bHerramientas.add(bDuplicar);
        bDuplicar.getAccessibleContext().setAccessibleName("");
        bDuplicar.getAccessibleContext().setAccessibleDescription("Duplicar");

        barraEstado.setText("Barra de estado");
        barraEstado.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        jPanel1.setLayout(new java.awt.BorderLayout());

        pImagen1.setPreferredSize(new java.awt.Dimension(470, 80));

        panel1.setBorder(javax.swing.BorderFactory.createTitledBorder("Brillo"));
        panel1.setToolTipText("Brillo");
        panel1.setPreferredSize(new java.awt.Dimension(200, 75));
        panel1.setLayout(new java.awt.BorderLayout());

        brillo.setMaximum(255);
        brillo.setMinimum(-255);
        brillo.setToolTipText("Brillo");
        brillo.setValue(0);
        brillo.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                brilloStateChanged(evt);
            }
        });
        brillo.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                brilloFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                brilloFocusLost(evt);
            }
        });
        panel1.add(brillo, java.awt.BorderLayout.CENTER);

        panel2.setBorder(javax.swing.BorderFactory.createTitledBorder("Filtro"));
        panel2.setToolTipText("Filtro");
        panel2.setPreferredSize(new java.awt.Dimension(100, 75));
        panel2.setLayout(new java.awt.GridLayout(1, 0));

        seleccionarMascara1.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Media", "Binomial", "Enfoque", "Relieve", "Laplaciana" }));
        seleccionarMascara1.setToolTipText("Filtros");
        seleccionarMascara1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                seleccionarMascara1ActionPerformed(evt);
            }
        });
        panel2.add(seleccionarMascara1);

        panel3.setBorder(javax.swing.BorderFactory.createTitledBorder("Contraste"));
        panel3.setToolTipText("Contraste");
        panel3.setMinimumSize(new java.awt.Dimension(249, 100));
        panel3.setPreferredSize(new java.awt.Dimension(150, 75));
        panel3.setLayout(new java.awt.GridLayout(1, 0));

        bNormal.setIcon(new javax.swing.ImageIcon(getClass().getResource("/iconosPractica10/contraste.png"))); // NOI18N
        bNormal.setToolTipText("Contraste ");
        bNormal.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bNormalActionPerformed(evt);
            }
        });
        panel3.add(bNormal);

        bIluminacion.setIcon(new javax.swing.ImageIcon(getClass().getResource("/iconosPractica10/iluminar.png"))); // NOI18N
        bIluminacion.setToolTipText("Contraste");
        bIluminacion.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bIluminacionActionPerformed(evt);
            }
        });
        panel3.add(bIluminacion);
        bIluminacion.getAccessibleContext().setAccessibleDescription("Contraste ");

        bOscurecimiento.setIcon(new javax.swing.ImageIcon(getClass().getResource("/iconosPractica10/oscurecer.png"))); // NOI18N
        bOscurecimiento.setToolTipText("Contraste ");
        bOscurecimiento.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bOscurecimientoActionPerformed(evt);
            }
        });
        panel3.add(bOscurecimiento);

        panel5.setBorder(javax.swing.BorderFactory.createTitledBorder("Color"));
        panel5.setPreferredSize(new java.awt.Dimension(135, 75));
        panel5.setLayout(new java.awt.BorderLayout());

        ShowBandas1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/iconosPractica11/bandas.png"))); // NOI18N
        ShowBandas1.setToolTipText("Extraer banda");
        ShowBandas1.setPreferredSize(new java.awt.Dimension(33, 33));
        ShowBandas1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ShowBandas1ActionPerformed(evt);
            }
        });
        panel5.add(ShowBandas1, java.awt.BorderLayout.LINE_START);

        EspacioColor1.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "sRGB", "YCC", "Grey" }));
        EspacioColor1.setToolTipText("Espacios de color");
        EspacioColor1.setPreferredSize(new java.awt.Dimension(60, 22));
        EspacioColor1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                EspacioColor1ActionPerformed(evt);
            }
        });
        panel5.add(EspacioColor1, java.awt.BorderLayout.CENTER);

        panel6.setBorder(javax.swing.BorderFactory.createTitledBorder("Rotación"));
        panel6.setToolTipText("Rotación");
        panel6.setPreferredSize(new java.awt.Dimension(280, 75));
        panel6.setLayout(new java.awt.BorderLayout());

        sliderRotacion1.setMaximum(360);
        sliderRotacion1.setMinorTickSpacing(90);
        sliderRotacion1.setPaintTicks(true);
        sliderRotacion1.setToolTipText("Rotacion libre");
        sliderRotacion1.setValue(0);
        sliderRotacion1.setPreferredSize(new java.awt.Dimension(20, 26));
        sliderRotacion1.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                sliderRotacion1StateChanged(evt);
            }
        });
        sliderRotacion1.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                sliderRotacion1FocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                sliderRotacion1FocusLost(evt);
            }
        });
        panel6.add(sliderRotacion1, java.awt.BorderLayout.CENTER);

        pRotacionFija1.setPreferredSize(new java.awt.Dimension(125, 75));
        pRotacionFija1.setLayout(new java.awt.GridLayout(1, 0));

        b90.setIcon(new javax.swing.ImageIcon(getClass().getResource("/iconosPractica10/rotacion90.png"))); // NOI18N
        b90.setToolTipText("rotacion");
        b90.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                b90ActionPerformed(evt);
            }
        });
        pRotacionFija1.add(b90);

        b180.setIcon(new javax.swing.ImageIcon(getClass().getResource("/iconosPractica10/rotacion180.png"))); // NOI18N
        b180.setToolTipText("rotacion");
        b180.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                b180ActionPerformed(evt);
            }
        });
        pRotacionFija1.add(b180);

        b270.setIcon(new javax.swing.ImageIcon(getClass().getResource("/iconosPractica10/rotacion270.png"))); // NOI18N
        b270.setToolTipText("rotacion");
        b270.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                b270ActionPerformed(evt);
            }
        });
        pRotacionFija1.add(b270);

        panel6.add(pRotacionFija1, java.awt.BorderLayout.EAST);

        panel4.setPreferredSize(new java.awt.Dimension(125, 50));
        panel4.setLayout(new javax.swing.BoxLayout(panel4, javax.swing.BoxLayout.LINE_AXIS));

        bBandcombine1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/iconosPractica11/combinar.png"))); // NOI18N
        bBandcombine1.setToolTipText("Combinación de bandas");
        bBandcombine1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bBandcombine1ActionPerformed(evt);
            }
        });
        panel4.add(bBandcombine1);

        bCuadratica1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/iconosPractica10/cuadratica.png"))); // NOI18N
        bCuadratica1.setToolTipText("Función cuadrática");
        bCuadratica1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bCuadratica1ActionPerformed(evt);
            }
        });
        panel4.add(bCuadratica1);

        bTintado.setIcon(new javax.swing.ImageIcon(getClass().getResource("/IconosPractica12/tintar.png"))); // NOI18N
        bTintado.setToolTipText("Tintado");
        bTintado.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bTintadoActionPerformed(evt);
            }
        });
        panel4.add(bTintado);

        bSepia.setIcon(new javax.swing.ImageIcon(getClass().getResource("/IconosPractica12/sepia.png"))); // NOI18N
        bSepia.setToolTipText("Sepia");
        bSepia.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bSepiaActionPerformed(evt);
            }
        });
        panel4.add(bSepia);

        bEcualizacion.setIcon(new javax.swing.ImageIcon(getClass().getResource("/IconosPractica12/ecualizar.png"))); // NOI18N
        bEcualizacion.setToolTipText("Ecualizacion");
        bEcualizacion.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bEcualizacionActionPerformed(evt);
            }
        });
        panel4.add(bEcualizacion);

        bFiltro.setIcon(new javax.swing.ImageIcon(getClass().getResource("/IconosPractica12/rojo.png"))); // NOI18N
        bFiltro.setToolTipText("Filtro rojo");
        bFiltro.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bFiltroActionPerformed(evt);
            }
        });
        panel4.add(bFiltro);

        Pixel.setText("Pixel");
        Pixel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                PixelActionPerformed(evt);
            }
        });
        panel4.add(Pixel);

        posterizacion.setMaximum(20);
        posterizacion.setMinimum(2);
        posterizacion.setToolTipText("Posterizacion");
        posterizacion.setValue(2);
        posterizacion.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                posterizacionStateChanged(evt);
            }
        });
        posterizacion.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                posterizacionFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                posterizacionFocusLost(evt);
            }
        });
        panel4.add(posterizacion);

        panel7.setBorder(javax.swing.BorderFactory.createTitledBorder("Escala"));
        panel7.setToolTipText("Escala");
        panel7.setPreferredSize(new java.awt.Dimension(100, 75));
        panel7.setLayout(new java.awt.GridLayout(1, 0));

        bAmpliar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/iconosPractica10/aumentar.png"))); // NOI18N
        bAmpliar.setToolTipText("Ampliar");
        bAmpliar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bAmpliarActionPerformed(evt);
            }
        });
        panel7.add(bAmpliar);

        bdisminuir.setIcon(new javax.swing.ImageIcon(getClass().getResource("/iconosPractica10/disminuir.png"))); // NOI18N
        bdisminuir.setToolTipText("Disminuir");
        bdisminuir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bdisminuirActionPerformed(evt);
            }
        });
        panel7.add(bdisminuir);

        javax.swing.GroupLayout pImagen1Layout = new javax.swing.GroupLayout(pImagen1);
        pImagen1.setLayout(pImagen1Layout);
        pImagen1Layout.setHorizontalGroup(
            pImagen1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pImagen1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(panel1, javax.swing.GroupLayout.PREFERRED_SIZE, 122, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(panel2, javax.swing.GroupLayout.PREFERRED_SIZE, 88, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(panel3, javax.swing.GroupLayout.PREFERRED_SIZE, 138, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(panel4, javax.swing.GroupLayout.PREFERRED_SIZE, 483, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(panel5, javax.swing.GroupLayout.PREFERRED_SIZE, 122, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(panel6, javax.swing.GroupLayout.PREFERRED_SIZE, 255, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(panel7, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        pImagen1Layout.setVerticalGroup(
            pImagen1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pImagen1Layout.createSequentialGroup()
                .addGroup(pImagen1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, pImagen1Layout.createSequentialGroup()
                        .addComponent(panel7, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(pImagen1Layout.createSequentialGroup()
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(pImagen1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(panel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(panel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(panel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(panel4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                    .addGroup(pImagen1Layout.createSequentialGroup()
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(pImagen1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(panel6, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(panel5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jPanel1.add(pImagen1, java.awt.BorderLayout.PAGE_END);

        desktop.setPreferredSize(new java.awt.Dimension(0, 484));

        javax.swing.GroupLayout desktopLayout = new javax.swing.GroupLayout(desktop);
        desktop.setLayout(desktopLayout);
        desktopLayout.setHorizontalGroup(
            desktopLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 1459, Short.MAX_VALUE)
        );
        desktopLayout.setVerticalGroup(
            desktopLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 333, Short.MAX_VALUE)
        );

        jPanel1.add(desktop, java.awt.BorderLayout.CENTER);

        jMenu1.setText("Archivo");
        jMenu1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenu1ActionPerformed(evt);
            }
        });

        bNuevo.setIcon(new javax.swing.ImageIcon(getClass().getResource("/iconos/nuevo.png"))); // NOI18N
        bNuevo.setText("Nuevo");
        bNuevo.setToolTipText("Nuevo");
        bNuevo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bNuevoActionPerformed(evt);
            }
        });
        jMenu1.add(bNuevo);

        bAbrir.setIcon(new javax.swing.ImageIcon(getClass().getResource("/iconos/abrir.png"))); // NOI18N
        bAbrir.setText("Abrir");
        bAbrir.setToolTipText("Abrir");
        bAbrir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bAbrirActionPerformed(evt);
            }
        });
        jMenu1.add(bAbrir);

        bGuardar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/iconos/guardar.png"))); // NOI18N
        bGuardar.setText("Guardar");
        bGuardar.setToolTipText("Guardar");
        bGuardar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bGuardarActionPerformed(evt);
            }
        });
        jMenu1.add(bGuardar);

        jMenuItem1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/iconosVideo/Capturar.png"))); // NOI18N
        jMenuItem1.setText("Abrir imagen");
        jMenuItem1.setToolTipText("Abrir imagen");
        jMenuItem1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem1ActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItem1);

        jRadioButtonMenuItem1.setSelected(true);
        jRadioButtonMenuItem1.setText("Abrir vídeo");
        jRadioButtonMenuItem1.setToolTipText("Abrir vídeo");
        jRadioButtonMenuItem1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/iconosVideo/AbrirVideo.png"))); // NOI18N
        jRadioButtonMenuItem1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jRadioButtonMenuItem1ActionPerformed(evt);
            }
        });
        jMenu1.add(jRadioButtonMenuItem1);

        jRadioButtonMenuItem2.setSelected(true);
        jRadioButtonMenuItem2.setText("Abrir audio");
        jRadioButtonMenuItem2.setToolTipText("Abrir audio");
        jRadioButtonMenuItem2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/iconosSonido/openAudio24x24.png"))); // NOI18N
        jRadioButtonMenuItem2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jRadioButtonMenuItem2ActionPerformed(evt);
            }
        });
        jMenu1.add(jRadioButtonMenuItem2);

        jMenuBar1.add(jMenu1);

        jMenu2.setText("Edición");
        jMenu2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenu2ActionPerformed(evt);
            }
        });

        bEdicion.setSelected(true);
        bEdicion.setText("Ver Barra Estado");
        bEdicion.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bEdicionActionPerformed(evt);
            }
        });
        jMenu2.add(bEdicion);

        jMenuBar1.add(jMenu2);

        mImagen.setText("Imagen");

        rescaleOp.setText("Operador RescaleOn");
        rescaleOp.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rescaleOpActionPerformed(evt);
            }
        });
        mImagen.add(rescaleOp);

        convolveOp.setText("Operador ConvolveOp");
        convolveOp.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                convolveOpActionPerformed(evt);
            }
        });
        mImagen.add(convolveOp);

        affineTransformOp.setText("Operador AffineTransformOp");
        affineTransformOp.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                affineTransformOpActionPerformed(evt);
            }
        });
        mImagen.add(affineTransformOp);

        lookupOp.setText("Operador LookupOp");
        lookupOp.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                lookupOpActionPerformed(evt);
            }
        });
        mImagen.add(lookupOp);

        colorConvertOp.setText("Operador colorConvertOp");
        colorConvertOp.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                colorConvertOpActionPerformed(evt);
            }
        });
        mImagen.add(colorConvertOp);

        jMenuBar1.add(mImagen);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(5, 5, 5)
                .addComponent(bHerramientas, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addComponent(jPanel1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(layout.createSequentialGroup()
                .addComponent(barraEstado, javax.swing.GroupLayout.PREFERRED_SIZE, 1459, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(5, 5, 5)
                .addComponent(bHerramientas, javax.swing.GroupLayout.PREFERRED_SIZE, 58, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, 413, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(barraEstado))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

   
    private void bNuevoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bNuevoActionPerformed
         VentanaInterna vi = new VentanaInterna(this);

        vi.addInternalFrameListener(new ManejadorVentanaInterna());

        desktop.add(vi);
        vi.setVisible(true);
        BufferedImage img;
        img = new BufferedImage(300, 300, BufferedImage.TYPE_INT_ARGB);
        img.createGraphics().setPaint(Color.red);

        Graphics2D graphics = img.createGraphics();

        graphics.setPaint(Color.white);
        graphics.fillRect(0, 0, img.getWidth(), img.getHeight());

        vi.getLienzo().setImg(img);
    }//GEN-LAST:event_bNuevoActionPerformed
  
    private void bAbrirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bAbrirActionPerformed
        // TODO add your handling code here:
        JFileChooser dlg = new JFileChooser();
        int resp = dlg.showOpenDialog(this);
        if( resp == JFileChooser.APPROVE_OPTION) {
            File f = dlg.getSelectedFile();
        }
    }//GEN-LAST:event_bAbrirActionPerformed

    private void bGuardarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bGuardarActionPerformed
      
       VentanaInterna vi = (VentanaInterna) desktop.getSelectedFrame();
        if(vi!=null){
            JFileChooser dlg = new JFileChooser();
            int resp = dlg.showSaveDialog(this);
            if(resp == JFileChooser.APPROVE_OPTION){
                try{
                    BufferedImage img = vi.getLienzo().getImg(true);
                    if(img!=null){
                        File f = dlg.getSelectedFile();
                        int posExtension = f.getName().indexOf(".")+1;
                        String extension = "";
                        if(posExtension==0){
                            extension = "jpg";
                        }
                        else{
                            extension = f.getName().substring(posExtension);
                        }
                        ImageIO.write(img, extension, f);
                        vi.setTitle(f.getName());
                         
                    }
                }catch(Exception ex){
                    System.err.println("Error al guardar la imagen.");
                }
            }
        }
    }//GEN-LAST:event_bGuardarActionPerformed

    private void jMenu1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenu1ActionPerformed

    }//GEN-LAST:event_jMenu1ActionPerformed

    private void bEdicionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bEdicionActionPerformed
        // TODO add your handling code here:
        this.barraEstado.setVisible(this.bEdicion.isSelected());
    }//GEN-LAST:event_bEdicionActionPerformed

    private void jMenu2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenu2ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jMenu2ActionPerformed

    private void bNuevo1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bNuevo1ActionPerformed
        VentanaInterna vi = new VentanaInterna(this);

        vi.addInternalFrameListener(new ManejadorVentanaInterna());

        desktop.add(vi);
        vi.setVisible(true);
        BufferedImage img;
        img = new BufferedImage(300, 300, BufferedImage.TYPE_INT_ARGB);
        img.createGraphics().setPaint(Color.red);

        Graphics2D graphics = img.createGraphics();

        graphics.setPaint(Color.white);
        graphics.fillRect(0, 0, img.getWidth(), img.getHeight());

        vi.getLienzo().setImg(img);     

    }//GEN-LAST:event_bNuevo1ActionPerformed

    private void bAbrir1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bAbrir1ActionPerformed
        JFileChooser dlg = new JFileChooser();
        int resp = dlg.showOpenDialog(this);
        if( resp == JFileChooser.APPROVE_OPTION) {
            File f = dlg.getSelectedFile();
        }
    }//GEN-LAST:event_bAbrir1ActionPerformed

    private void bGuardar1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bGuardar1ActionPerformed
         bGuardarActionPerformed(evt);
    }//GEN-LAST:event_bGuardar1ActionPerformed

  
    private void bPuntoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bPuntoActionPerformed
        bLinea.setSelected(false);
        bRectangulo.setSelected(false);
        bElipse.setSelected(false);
        //bEditar.setSelected(false);
        VentanaInterna vi = (VentanaInterna) this.desktop.getSelectedFrame();
        if (vi != null) {
            vi.getLienzo().setForma(sm.jdrg.graficos.Formas.PUNTO);
        }

    }//GEN-LAST:event_bPuntoActionPerformed

    private void bLineaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bLineaActionPerformed
        bPunto.setSelected(false);
        bRectangulo.setSelected(false);
        bElipse.setSelected(false);
        //bEditar.setSelected(false);
        VentanaInterna vi = (VentanaInterna) this.desktop.getSelectedFrame();
        if (vi != null) {
            vi.getLienzo().setForma(sm.jdrg.graficos.Formas.LINEA);
            //vi.getLienzo().setEditar(this.bEditar.isSelected());
        }
    }//GEN-LAST:event_bLineaActionPerformed

    private void bRectanguloActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bRectanguloActionPerformed
        bLinea.setSelected(false);
        bPunto.setSelected(false);
        bElipse.setSelected(false);
        //bEditar.setSelected(false);
        VentanaInterna vi = (VentanaInterna) this.desktop.getSelectedFrame();
        if (vi != null) {
            vi.getLienzo().setForma(sm.jdrg.graficos.Formas.RECTANGULO);
            //vi.getLienzo().setEditar(this.bEditar.isSelected());
        }
    }//GEN-LAST:event_bRectanguloActionPerformed

    private void bElipseActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bElipseActionPerformed
        bLinea.setSelected(false);
        bRectangulo.setSelected(false);
        bPunto.setSelected(false);
        //bEditar.setSelected(false);
        VentanaInterna vi = (VentanaInterna) this.desktop.getSelectedFrame();
        if (vi != null) {
            vi.getLienzo().setForma(sm.jdrg.graficos.Formas.ELIPSE);
            //vi.getLienzo().setEditar(this.bEditar.isSelected());
        }
    }//GEN-LAST:event_bElipseActionPerformed

    private void bRellenoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bRellenoActionPerformed
        VentanaInterna vi = (VentanaInterna) this.desktop.getSelectedFrame();
        if (vi != null) {
            if(vi.getLienzo().getRelleno()==false)
            vi.getLienzo().setRelleno(true);
            else
            vi.getLienzo().setRelleno(false);
        }
        this.repaint();
    }//GEN-LAST:event_bRellenoActionPerformed

    private void bAlisarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bAlisarActionPerformed
         VentanaInterna vi = (VentanaInterna) this.desktop.getSelectedFrame();
        if (vi != null) {
            if(vi.getLienzo().getAlisado()==false)
            vi.getLienzo().setAlisado(true);
            else
            vi.getLienzo().setAlisado(false);
        }
    }//GEN-LAST:event_bAlisarActionPerformed

    private void brilloStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_brilloStateChanged
        // TODO add your handling code here:
        VentanaInterna vi = (VentanaInterna) (desktop.getSelectedFrame());
        if (vi != null && imgFuente!=null) {
            BufferedImage img = vi.getLienzo().getImg();
            if (img != null) {
                try {
                    int brillo = this.brillo.getValue();
                    RescaleOp rop = new RescaleOp(1.0f, brillo, null);
                    rop.filter(imgFuente, img);
                    desktop.repaint();
                } catch (IllegalArgumentException e) {
                    System.err.println(e.getLocalizedMessage());
                }
            }
        }
    }//GEN-LAST:event_brilloStateChanged

    private void brilloFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_brilloFocusGained
        // TODO add your handling code here:
         VentanaInterna vi = (VentanaInterna) (desktop.getSelectedFrame());
        if (vi != null) {
            ColorModel cm = vi.getLienzo().getImg().getColorModel();
            WritableRaster raster = vi.getLienzo().getImg().copyData(null);
            boolean alfaPre = vi.getLienzo().getImg().isAlphaPremultiplied();
            imgFuente = new BufferedImage(cm, raster, alfaPre, null);
        }
    }//GEN-LAST:event_brilloFocusGained

    private void brilloFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_brilloFocusLost
        // TODO add your handling code here:
        imgFuente=null;
        this.brillo.setValue(0);
    }//GEN-LAST:event_brilloFocusLost

    private void seleccionarMascara1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_seleccionarMascara1ActionPerformed
        // TODO add your handling code here:
        VentanaInterna vi = (VentanaInterna) (desktop.getSelectedFrame());
        if (vi != null) {
            BufferedImage img = vi.getLienzo().getImg();
            Kernel k = null;
        switch (this.seleccionarMascara1.getSelectedIndex()) {
            case 0:
                k = KernelProducer.createKernel(KernelProducer.TYPE_MEDIA_3x3);
                break;
            case 1:
                k = KernelProducer.createKernel(KernelProducer.TYPE_BINOMIAL_3x3);
                break;
            case 2:
                k = KernelProducer.createKernel(KernelProducer.TYPE_ENFOQUE_3x3);
                break;
            case 3:
                k = KernelProducer.createKernel(KernelProducer.TYPE_RELIEVE_3x3);
                break;
            case 4:
                k = KernelProducer.createKernel(KernelProducer.TYPE_LAPLACIANA_3x3);
            }
        
    
            if (img != null) {
                try {
                    ConvolveOp cop = new ConvolveOp(k);
                    BufferedImage imgdest = cop.filter(img, null);
                    vi.getLienzo().setImg(imgdest);
                    vi.getLienzo().repaint();
                } catch (IllegalArgumentException e) {
                    System.err.println(e.getLocalizedMessage());
                }
            }
        }
        
    }//GEN-LAST:event_seleccionarMascara1ActionPerformed

    private void bNormalActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bNormalActionPerformed
        // TODO add your handling code here:
             LookupTable tabla = LookupTableProducer.createLookupTable(LookupTableProducer.TYPE_SFUNCION);
        aplicarLookUp(tabla);
    }//GEN-LAST:event_bNormalActionPerformed

    private void bIluminacionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bIluminacionActionPerformed
        // TODO add your handling code here:
          LookupTable tabla = LookupTableProducer.createLookupTable(LookupTableProducer.TYPE_LOGARITHM);
        aplicarLookUp(tabla);
    }//GEN-LAST:event_bIluminacionActionPerformed

    private void bOscurecimientoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bOscurecimientoActionPerformed
        // TODO add your handling code here:
           LookupTable tabla = LookupTableProducer.createLookupTable(LookupTableProducer.TYPE_POWER);
        aplicarLookUp(tabla);
    }//GEN-LAST:event_bOscurecimientoActionPerformed

    private void bBandcombine1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bBandcombine1ActionPerformed
        // TODO add your handling code here:
        VentanaInterna vi = (VentanaInterna) (desktop.getSelectedFrame());
        if (vi != null) {
            BufferedImage img = vi.getLienzo().getImg();
            if (img != null) {
                try {
                    float[][] matriz = {{0.0F, 0.5F, 0.5F},
                                        {0.5F, 0.0F, 0.5F},
                                        {0.5F, 0.5F, 0.0F}};
                    BandCombineOp bcop = new BandCombineOp(matriz, null);
                    bcop.filter(img.getRaster(), img.getRaster());
                    vi.getLienzo().repaint();
                } catch (IllegalArgumentException e) {
                    System.err.println(e.getLocalizedMessage());
                }
            }
        }
    }//GEN-LAST:event_bBandcombine1ActionPerformed

    private void bCuadratica1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bCuadratica1ActionPerformed
        
        double m=128;        
        double Max=0;
        if(m>=128)
            Max = ((1.0 / 100.0 )* Math.pow((0 - m), 2));
        else
            Max = ((1.0 / 100.0 )* Math.pow((255 - m), 2));    
        double K = 255.0/Max; 
        byte[] lt = new byte[256];
        for (int i = 0; i < 256; ++i) {
            lt[i] = (byte)(K *((1.0 / 100.0 )* Math.pow((i - m), 2)));  
        }
        ByteLookupTable slt = new ByteLookupTable(0, lt);      
        aplicarLookUp(slt);
    }//GEN-LAST:event_bCuadratica1ActionPerformed

    private void ShowBandas1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ShowBandas1ActionPerformed
        // TODO add your handling code here:
        VentanaInterna vi = (VentanaInterna) (desktop.getSelectedFrame());
        if (vi != null) {
            BufferedImage img = vi.getLienzo().getImg();
            if (img != null) {
                try {
                    
                    for (int i=0; i < img.getRaster().getNumBands(); i++){
                    BufferedImage imgbands = getImageBand(img, i);
                    vi = new VentanaInterna(this);
                    vi.addInternalFrameListener(new ManejadorVentanaInterna()); 
                    vi.getLienzo().setImg(imgbands);
                    vi.setLocation(vi.getX() + 400, vi.getY());
                    desktop.add(vi);
                    vi.setVisible(true);
                    
                }
                } catch (IllegalArgumentException e) {
                    System.err.println(e.getLocalizedMessage());
                }
            }
        }
    }//GEN-LAST:event_ShowBandas1ActionPerformed

    private void EspacioColor1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_EspacioColor1ActionPerformed
        // TODO add your handling code here:
        VentanaInterna vi = (VentanaInterna) (desktop.getSelectedFrame());
        if (vi != null) {
            BufferedImage img = vi.getLienzo().getImg();
            if (img != null) {
                ColorSpace cs = null;
                int seleccion = this.EspacioColor1.getSelectedIndex();
                switch(seleccion){
                    case 0:
                        cs = ColorSpace.getInstance(ColorSpace.CS_sRGB);
                    break;
                    case 1:
                        cs = ColorSpace.getInstance(ColorSpace.CS_PYCC);
                    break;
                    case 2:
                        cs = new sm.image.color.GreyColorSpace(); //Para que los grises sean mas claros
                    break;       
                } 
                 
                try {
                    ColorConvertOp op = new ColorConvertOp(cs, null);
                    BufferedImage imgdest = op.filter(img, null);
                    vi = new VentanaInterna(this);
                    vi.addInternalFrameListener(new ManejadorVentanaInterna()); 
                    vi.getLienzo().setImg(imgdest);
                    vi.setLocation(vi.getX() + 400, vi.getY());
                    desktop.add(vi);
                    vi.setVisible(true);
                } catch (IllegalArgumentException e) {
                    System.err.println(e.getLocalizedMessage());
                }
            }
        }
    }//GEN-LAST:event_EspacioColor1ActionPerformed

    private void sliderRotacion1StateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_sliderRotacion1StateChanged
        // TODO add your handling code here:
        VentanaInterna vi = (VentanaInterna) (desktop.getSelectedFrame());
        if (vi != null) {
            if (imgFuente != null) {
                try {
                    AffineTransform at = AffineTransform.getRotateInstance(Math.toRadians(this.sliderRotacion1.getValue()), imgFuente.getWidth() / 2, imgFuente.getHeight() / 2);
                    AffineTransformOp atop = new AffineTransformOp(at, AffineTransformOp.TYPE_BILINEAR);
                    BufferedImage imgdest = atop.filter(imgFuente, null);
                    vi.getLienzo().setImg(imgdest);
                    vi.getLienzo().repaint();
                } catch (IllegalArgumentException e) {
                    System.err.println(e.getLocalizedMessage());
                }
            }
        }
    }//GEN-LAST:event_sliderRotacion1StateChanged

    private void sliderRotacion1FocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_sliderRotacion1FocusGained
        // TODO add your handling code here:
        VentanaInterna vi = (VentanaInterna) (desktop.getSelectedFrame());
        if(vi!=null){
            this.imgFuente = vi.getLienzo().getImg();
        }
    }//GEN-LAST:event_sliderRotacion1FocusGained

    private void sliderRotacion1FocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_sliderRotacion1FocusLost
        // TODO add your handling code here:
          this.imgFuente = null;
        this.sliderRotacion1.setValue(0);
    }//GEN-LAST:event_sliderRotacion1FocusLost

    private void b90ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_b90ActionPerformed
        // TODO add your handling code here:
        aplicarRotacion(90);
    }//GEN-LAST:event_b90ActionPerformed

    private void b180ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_b180ActionPerformed
        // TODO add your handling code here:
        aplicarRotacion(180);
    }//GEN-LAST:event_b180ActionPerformed

    private void b270ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_b270ActionPerformed
        // TODO add your handling code here:
        aplicarRotacion(270);
    }//GEN-LAST:event_b270ActionPerformed

    private void bAmpliarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bAmpliarActionPerformed
        // TODO add your handling code here:
        aplicarEscalado(1.20, 1.20);
    }//GEN-LAST:event_bAmpliarActionPerformed

    private void bdisminuirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bdisminuirActionPerformed
        // TODO add your handling code here:
        aplicarEscalado(0.70, 0.70);
    }//GEN-LAST:event_bdisminuirActionPerformed

    private void bTintadoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bTintadoActionPerformed

        VentanaInterna vi = (VentanaInterna) (desktop.getSelectedFrame());
        if (vi != null) {
            BufferedImage img = vi.getLienzo().getImg();
            if (img != null) {
                try {
                    Color c = vi.getLienzo().getColor();
                    TintOp tintado = new TintOp(c, 0.5f);
                    tintado.filter(img, img);
                    vi.getLienzo().repaint();
                } catch (IllegalArgumentException e) {
                    System.err.println(e.getLocalizedMessage());
                }
            }
        }
    }//GEN-LAST:event_bTintadoActionPerformed

    private void bSepiaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bSepiaActionPerformed

        VentanaInterna vi = (VentanaInterna) (desktop.getSelectedFrame());
        if (vi != null) {
            BufferedImage img = vi.getLienzo().getImg();
            if (img != null) {
                try {
                    SepiaOp sepia = new SepiaOp();
                    sepia.filter(img, img);
                    vi.getLienzo().repaint();
                } catch (IllegalArgumentException e) {
                    System.err.println(e.getLocalizedMessage());
                }
            }
        }
    }//GEN-LAST:event_bSepiaActionPerformed

    private void bEcualizacionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bEcualizacionActionPerformed

        VentanaInterna vi = (VentanaInterna) (desktop.getSelectedFrame());
        if (vi != null) {
            BufferedImage img = vi.getLienzo().getImg();
            if (img != null) {
                try {
                    EqualizationOp ecualizacion = new EqualizationOp();
                    ecualizacion.filter(img, img);
                    vi.getLienzo().repaint();
                } catch (IllegalArgumentException e) {
                    System.err.println(e.getLocalizedMessage());
                }
            }
        }
    }//GEN-LAST:event_bEcualizacionActionPerformed

    private void bFiltroActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bFiltroActionPerformed
        VentanaInterna vi = (VentanaInterna) (desktop.getSelectedFrame());
        if (vi != null) {
            BufferedImage img = vi.getLienzo().getImg();
            if (img != null) {
                try {

                    FiltroRojoOP op = new FiltroRojoOP();
                    op.filter(img, img);
                    vi.getLienzo().repaint();
                } catch (IllegalArgumentException e) {
                    System.err.println(e.getLocalizedMessage());
                }
            }
        }
    }//GEN-LAST:event_bFiltroActionPerformed

    private void posterizacionStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_posterizacionStateChanged

        VentanaInterna vi = (VentanaInterna) (desktop.getSelectedFrame());
        if (vi != null && imgFuente!=null) {
            BufferedImage img = vi.getLienzo().getImg();
            if (img != null) {
                try {
                    int posterizado = this.posterizacion.getValue();
                    PosterizacionOp op = new PosterizacionOp(posterizado);
                    BufferedImage imgdest = op.filter(imgFuente, null);
                    vi.getLienzo().setImg(imgdest);
                    vi.getLienzo().repaint();
                } catch (IllegalArgumentException e) {
                    System.err.println(e.getLocalizedMessage());
                }
            }
        }
    }//GEN-LAST:event_posterizacionStateChanged

    private void posterizacionFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_posterizacionFocusGained
        VentanaInterna vi = (VentanaInterna) (desktop.getSelectedFrame());
        if(vi!=null){
            this.imgFuente = vi.getLienzo().getImg();
        }
    }//GEN-LAST:event_posterizacionFocusGained

    private void posterizacionFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_posterizacionFocusLost
        this.imgFuente=null;
        this.posterizacion.setValue(2);
    }//GEN-LAST:event_posterizacionFocusLost

    private void bStopActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bStopActionPerformed

               
       if (desktop.getSelectedFrame() instanceof VentanaInternaVideo) {
            VentanaInternaVideo vv = (VentanaInternaVideo) desktop.getSelectedFrame();
            vv.addMediaPlayerEventListener(new VideoListener());
            if (vv != null) {
                vv.stop();
            }
            
         //Si no es un video, parar por completo el audio
        }
       
        if(play!=null){
          
                play.stop();
            play=null;
        }
        
        
        
    }//GEN-LAST:event_bStopActionPerformed

    private void bPlayActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bPlayActionPerformed

        
        
        if (desktop.getSelectedFrame() instanceof VentanaInternaVideo){
            VentanaInternaVideo vv = (VentanaInternaVideo) desktop.getSelectedFrame();
            vv.addMediaPlayerEventListener(new VideoListener());
            if (vv != null) {
                vv.play();
            }

            
        }
        
        
        else{ 
           File f = (File) jComboBox3.getSelectedItem();
           if(f!=null){
               play = new SMClipPlayer(f);
            if(play!=null){
                play.addLineListener(new ManejadorAudio());
                play.play();
            
        }
        }
        }
        

    }//GEN-LAST:event_bPlayActionPerformed

    private void bGrabarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bGrabarActionPerformed

       

            JFileChooser dlg = new JFileChooser();
            int resp = dlg.showSaveDialog(this);
            if (resp == JFileChooser.APPROVE_OPTION) {
                try {

                    File f = dlg.getSelectedFile();
                    recorder = new SMSoundRecorder(f);
                    if(recorder!=null){
                        recorder.record();
                        tiempo.setText("00:00");
                    }                
                    

                } catch (Exception ex) {
                    System.out.println("Error al guardar el sonido");
                }
                this.timer = new Timer(1000, new ActionListener() {
                 int segundos = 1;

                @Override
                public void actionPerformed(ActionEvent e) {
                    tiempo.setText(Tiempo(segundos));
                    segundos++;
                }

                    
            });
                timer.start();
            //Si pulsamos el boton de grabar
            }
        
    }//GEN-LAST:event_bGrabarActionPerformed

    private void bCamaraActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bCamaraActionPerformed
        VentanaInternaCamara vc = VentanaInternaCamara.getInstance();
        if (vc != null) {
            /*VentanaInterna vi = new VentanaInterna(this);
            vi.addInternalFrameListener(new ManejadorVentanaInterna());*/
           
            this.desktop.add(vc);
            vc.setVisible(true);
        }
    }//GEN-LAST:event_bCamaraActionPerformed

    private void bCapturaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bCapturaActionPerformed

        //Si la ventana es de audio, hacer captura con metodo implementado vv.getCaptura
        if (desktop.getSelectedFrame() instanceof VentanaInternaVideo) {
            VentanaInternaVideo vv = (VentanaInternaVideo) desktop.getSelectedFrame();

            if (vv != null) {
                BufferedImage img = vv.getCaptura();
                VentanaInterna vi = new VentanaInterna(this);
                vi.addInternalFrameListener(new ManejadorVentanaInterna());
                vi.getLienzo().setImg(img);
                vi.setTitle("CapturaVideo");
                this.desktop.add(vi);
                vi.setVisible(true);
            }
            //Si la ventana es de camara, realizar foto
        } else if (desktop.getSelectedFrame() instanceof VentanaInternaCamara) {

            VentanaInternaCamara vc = (VentanaInternaCamara) desktop.getSelectedFrame();
            if (vc != null) {
                BufferedImage img = vc.getImage();
                VentanaInterna vi = new VentanaInterna(this);
                vi.addInternalFrameListener(new ManejadorVentanaInterna());
                vi.getLienzo().setImg(img);
                vi.setTitle("FotoWebCam");
                this.desktop.add(vi);
                vi.setVisible(true);
            }
        }
        
    }//GEN-LAST:event_bCapturaActionPerformed

    private void jButton23ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton23ActionPerformed
        if(recorder!=null){
          
                recorder.stop();
            recorder=null;
        }
        timer.stop();
        tiempo.setText("00:00");
    }//GEN-LAST:event_jButton23ActionPerformed

    private void jRadioButtonMenuItem1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jRadioButtonMenuItem1ActionPerformed
        // TODO add your handling code here:
          
        JFileChooser dlg = new JFileChooser();
        int resp = dlg.showOpenDialog(this);
        File f = dlg.getSelectedFile();
        String name = f.getAbsolutePath();
        File f2 = new File(name){
            @Override
            public String toString(){
                return this.getName();
            }
        };
        if(resp == JFileChooser.APPROVE_OPTION) { 
            try{
                                    VentanaInternaVideo vv = VentanaInternaVideo.getInstance(f);
                    vv.addMediaPlayerEventListener(new VideoListener());
                    desktop.add(vv);
                    vv.setTitle(f.getName());
                    vv.setVisible(true);
                     jComboBox3.addItem(f2);
            
            }catch(Exception ex){
                System.err.println("Error al leer el audio");
            }
            
        }
            
            
        
    }//GEN-LAST:event_jRadioButtonMenuItem1ActionPerformed

    private void jRadioButtonMenuItem2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jRadioButtonMenuItem2ActionPerformed
        JFileChooser dlg = new JFileChooser();
        int resp = dlg.showOpenDialog(this);
        File f = dlg.getSelectedFile();
        String name = f.getAbsolutePath();
        File f2 = new File(name){
            @Override
            public String toString(){
                return this.getName();
            }
        };
        if(resp == JFileChooser.APPROVE_OPTION){
            try{
                
                this.jComboBox3.addItem(f2);
                this.jComboBox3.setSelectedItem(f2);
            }catch (Exception ex){
                System.out.println("Error al leer el audio");
            }

        }
        
    }//GEN-LAST:event_jRadioButtonMenuItem2ActionPerformed

    private void jMenuItem1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem1ActionPerformed
        // TODO add your handling code here:
                JFileChooser dlg = new JFileChooser();

        int resp = dlg.showOpenDialog(this);
        File f = dlg.getSelectedFile();
         BufferedImage img;
        try {
                     img = ImageIO.read(f);
                    VentanaInterna vi = new VentanaInterna(this);
                    vi.addInternalFrameListener(new ManejadorVentanaInterna());
                    vi.getLienzo().setImg(img);
                    this.desktop.add(vi);
                    vi.setTitle(f.getName());
                    vi.setVisible(true);
        } catch (IOException ex) {
            Logger.getLogger(VentanaPrincipal.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_jMenuItem1ActionPerformed

    private void jComboBox3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBox3ActionPerformed
        
    }//GEN-LAST:event_jComboBox3ActionPerformed

    private void bNegroActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bNegroActionPerformed
        // TODO add your handling code here:
         VentanaInterna vi = (VentanaInterna) this.desktop.getSelectedFrame();
        if (vi != null) {
            vi.getLienzo().setColor(Color.BLACK);
            vi.getLienzo().setPlano(true);
        }
    }//GEN-LAST:event_bNegroActionPerformed

    private void bVerdeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bVerdeActionPerformed
        // TODO add your handling code here:
         VentanaInterna vi = (VentanaInterna) this.desktop.getSelectedFrame();
        if (vi != null) {
            vi.getLienzo().setColor(Color.GREEN);
            vi.getLienzo().setPlano(true);
        }
    }//GEN-LAST:event_bVerdeActionPerformed

    private void bBlancoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bBlancoActionPerformed
        // TODO add your handling code here:
         VentanaInterna vi = (VentanaInterna) this.desktop.getSelectedFrame();
        if (vi != null) {
            vi.getLienzo().setColor(Color.WHITE);
            vi.getLienzo().setPlano(true);
        }
    }//GEN-LAST:event_bBlancoActionPerformed

    private void bRojoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bRojoActionPerformed
        // TODO add your handling code here:
         VentanaInterna vi = (VentanaInterna) this.desktop.getSelectedFrame();
        if (vi != null) {
            vi.getLienzo().setColor(Color.RED);
            vi.getLienzo().setPlano(true);
        }
    }//GEN-LAST:event_bRojoActionPerformed

    private void bAzulActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bAzulActionPerformed
        // TODO add your handling code here:
         VentanaInterna vi = (VentanaInterna) this.desktop.getSelectedFrame();
        if (vi != null) {
            vi.getLienzo().setColor(Color.BLUE);
            vi.getLienzo().setPlano(true);
        }
    }//GEN-LAST:event_bAzulActionPerformed

    private void bAmarilloActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bAmarilloActionPerformed
        // TODO add your handling code here:
         VentanaInterna vi = (VentanaInterna) this.desktop.getSelectedFrame();
        if (vi != null) {
            vi.getLienzo().setColor(Color.YELLOW);
            vi.getLienzo().setPlano(true);
        }
    }//GEN-LAST:event_bAmarilloActionPerformed

    private void jSlider3StateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_jSlider3StateChanged
        // TODO add your handling code here:
        VentanaInterna vi = (VentanaInterna) this.desktop.getSelectedFrame();
        float grosor = this.jSlider3.getValue();
        if (vi != null) {
            vi.getLienzo().setGrosor(grosor);

        }
    }//GEN-LAST:event_jSlider3StateChanged

    private void bDiscontinuidadActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bDiscontinuidadActionPerformed
        // TODO add your handling code here:
        VentanaInterna vi = (VentanaInterna) this.desktop.getSelectedFrame();
        if (vi != null) {
            if(vi.getLienzo().getDiscontinuidad()==false)
            vi.getLienzo().setDiscontinuidad(true);
            else
            vi.getLienzo().setDiscontinuidad(false);

        }

    }//GEN-LAST:event_bDiscontinuidadActionPerformed

    private void bTransparenciaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bTransparenciaActionPerformed
        // TODO add your handling code here:
        VentanaInterna vi = (VentanaInterna) this.desktop.getSelectedFrame();
        if (vi != null) {
            if(vi.getLienzo().getTransparencia()==false)
            vi.getLienzo().setTransparencia(true);
            else
            vi.getLienzo().setTransparencia(false);
        }
        this.repaint();
    }//GEN-LAST:event_bTransparenciaActionPerformed

    private void colorTrazoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_colorTrazoActionPerformed
        // TODO add your handling code here:
        VentanaInterna vi = (VentanaInterna) this.desktop.getSelectedFrame();
        if (vi != null) {
            switch(this.colorTrazo.getSelectedIndex()){
                case 0:
                vi.getLienzo().setColorTrazo(Color.BLACK);
                break;
                case 1:
                    
                    vi.getLienzo().setColorTrazo(Color.RED);
                    break;
                case 2:
                    vi.getLienzo().setColorTrazo(Color.GREEN);
                     break;
                case 3:
                    vi.getLienzo().setColorTrazo(Color.BLUE);
                    break;
                case 4:   
                vi.getLienzo().setColorTrazo(Color.YELLOW);
                break;
                case 5:
                   vi.getLienzo().setColorTrazo(Color.WHITE);
                break;
        }
        }
    }//GEN-LAST:event_colorTrazoActionPerformed

    private void colorRellenoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_colorRellenoActionPerformed
        // TODO add your handling code here:
        VentanaInterna vi = (VentanaInterna) this.desktop.getSelectedFrame();
        if (vi != null) {
            switch(this.colorRelleno.getSelectedIndex()){
                case 0:
                vi.getLienzo().setColorRelleno(Color.BLACK);
                break;
                case 1:
                    
                    vi.getLienzo().setColorRelleno(Color.RED);
                    break;
                case 2:
                    vi.getLienzo().setColorRelleno(Color.GREEN);
                     break;
                case 3:
                    vi.getLienzo().setColorRelleno(Color.BLUE);
                    break;
                case 4:   
                vi.getLienzo().setColorRelleno(Color.YELLOW);
                break;
                case 5:
                   vi.getLienzo().setColorRelleno(Color.WHITE);
                break;
        }
        }
    }//GEN-LAST:event_colorRellenoActionPerformed

    private void PixelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_PixelActionPerformed
        // TODO add your handling code here:
        VentanaInterna vi = (VentanaInterna) (desktop.getSelectedFrame());
        if (vi != null) {
            BufferedImage img = vi.getLienzo().getImg();
            if (img != null) {
                try {
                    PixelOp mgg = new PixelOp();
                    mgg.filter(img, img);
                    vi.repaint();
                } catch (Exception e) {
                    System.err.println(e.getLocalizedMessage());
                }
            }
        }
    }//GEN-LAST:event_PixelActionPerformed

    private void colorConvertOpActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_colorConvertOpActionPerformed

        VentanaInterna vi = (VentanaInterna) (desktop.getSelectedFrame());
        if (vi != null) {
            BufferedImage img = vi.getLienzo().getImg();
            if (img != null) {
                try {
                    ColorSpace cs = new sm.image.color.GreyColorSpace();
                    ColorConvertOp op = new ColorConvertOp(cs, null);
                    BufferedImage imgdest = op.filter(img, null);
                    vi.getLienzo().setImg(imgdest);
                    vi.getLienzo().repaint();
                } catch (IllegalArgumentException e) {
                    System.err.println(e.getLocalizedMessage());
                }
            }
        }
    }//GEN-LAST:event_colorConvertOpActionPerformed

    private void lookupOpActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_lookupOpActionPerformed

        byte funcionT[] = new byte[256];
        for (int x = 0; x < 256; x++) {
            funcionT[x] = (byte) (255 - x); // Negativo
        }
        LookupTable tabla = new ByteLookupTable(0, funcionT);
        aplicarLookUp(tabla);
    }//GEN-LAST:event_lookupOpActionPerformed

    private void affineTransformOpActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_affineTransformOpActionPerformed
        aplicarEscalado(1.5, 1.5);
        //Otra operacion probada -> Traslacion: AffineTransform at = AffineTransform.getTranslateInstance(15, 15);
    }//GEN-LAST:event_affineTransformOpActionPerformed

    private void convolveOpActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_convolveOpActionPerformed
        VentanaInterna vi = (VentanaInterna) (desktop.getSelectedFrame());
        if (vi != null) {
            BufferedImage img = vi.getLienzo().getImg();
            if (img != null) {
                try {
                    float filtro[] = {0.1f, 0.1f, 0.1f, 0.1f, 0.2f, 0.1f, 0.1f, 0.1f, 0.1f};
                    Kernel k = new Kernel(3, 3, filtro);
                    ConvolveOp cop = new ConvolveOp(k);
                    BufferedImage imgdest = cop.filter(img, null);
                    vi.getLienzo().setImg(imgdest);
                    vi.getLienzo().repaint();
                } catch (IllegalArgumentException e) {
                    System.err.println(e.getLocalizedMessage());
                }
            }
        }
    }//GEN-LAST:event_convolveOpActionPerformed

    private void rescaleOpActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rescaleOpActionPerformed
        VentanaInterna vi = (VentanaInterna) (desktop.getSelectedFrame());
        if (vi != null) {
            BufferedImage img = vi.getLienzo().getImg();
            if (img != null) {
                try {
                    RescaleOp rop = new RescaleOp(1.0F, 100.0F, null);
                    rop.filter(img, img);
                    vi.getLienzo().repaint();
                } catch (IllegalArgumentException e) {
                    System.err.println(e.getLocalizedMessage());
                }
            }
        }
    }//GEN-LAST:event_rescaleOpActionPerformed

    private void bDuplicarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bDuplicarActionPerformed
        // TODO add your handling code here:
        
        VentanaInterna vi = new VentanaInterna(this);

        VentanaInterna activa = (VentanaInterna) this.desktop.getSelectedFrame();
        vi.addInternalFrameListener(new ManejadorVentanaInterna());
        if (activa != null) {

            vi.setLocation(vi.getX() + 400, vi.getY());
            this.desktop.add(vi);
            vi.setVisible(true);
            vi.setTitle("Nueva_" + activa.getTitle());

            BufferedImage img = activa.getLienzo().getImg(true);

            vi.getLienzo().setImg(img);

        }
    }//GEN-LAST:event_bDuplicarActionPerformed
    /**
     * Recibe un numero total de segundos y devuelve un string en formato "00:00"
     * @param seg tiempo segundos total
     * @return string
     */
     public String Tiempo(int seg) {
        int minutos = (seg % 3600) / 600;
        int segundos = seg % 600;
        return String.format("%02d:%02d", minutos, segundos);
    }
    
  
  
    /**
     * Hereda de InternalFrame. Permite manejar ventanas internas.
     */
    public class ManejadorVentanaInterna extends javax.swing.event.InternalFrameAdapter{
         @Override
         public void internalFrameActivated(javax.swing.event.InternalFrameEvent evt){
             
             VentanaInterna vi = (VentanaInterna)evt.getInternalFrame();
             
            switch (vi.getLienzo().getForma()) {
                case PUNTO:
                    bPunto.setSelected(true);
                    break;
                case LINEA:
                    bLinea.setSelected(true);
                    break;
                case RECTANGULO:
                    bRectangulo.setSelected(true);
                    break;
                case ELIPSE:
                    bElipse.setSelected(true);
                    break;
            }
        
           
     
            
            

            vi.repaint();
         }
         
     }
        /**
         * Hereda de MediaPlayerEventAdapter.
         * Permite manejar eventos generados por VLC.
         */
        public class VideoListener extends MediaPlayerEventAdapter {

        public void playing(MediaPlayer mediaPlayer) {
            bStop.setEnabled(true);
            bPlay.setEnabled(false);
        }

        public void paused(MediaPlayer mediaPlayer) {
            bStop.setEnabled(false);
            bPlay.setEnabled(true);
        }

        public void finished(MediaPlayer mediaPlayer) {
            this.paused(mediaPlayer);

        }
        
        //Si cerramos la ventana de video, reiniciar los botones de repoduccion
        @Override
        public void stopped(MediaPlayer mediaPlayer) {
            bStop.setEnabled(true);
            bPlay.setEnabled(true);
        }

    
    }
    /**
     * Hereda de LineListener. Permite manejar eventos generados por
     * el repoductor de audio.
     */
    public class ManejadorAudio implements LineListener {
        @Override
        public void update(LineEvent event) {
            if (event.getType() == LineEvent.Type.START) {
                bPlay.setEnabled(false);
            }
            if (event.getType() == LineEvent.Type.STOP) {
                bPlay.setEnabled(true);
            }
            if (event.getType() == LineEvent.Type.CLOSE) {
                
            }
        }
    }
    
    
    
    /**
     * Aplica el operador lookupOp al parametro recibido  
     * @param tabla parametro lookupTable al que aplicar el operador
     */
    public void aplicarLookUp(LookupTable tabla){
        VentanaInterna vi = (VentanaInterna) (desktop.getSelectedFrame());
        if (vi != null) {
            BufferedImage img = vi.getLienzo().getImg();
            if (img != null) {
                try {
                    LookupOp lop = new LookupOp(tabla, null);
                    lop.filter(img, img);
                    vi.getLienzo().repaint();
                } catch (IllegalArgumentException e) {
                    System.err.println(e.getLocalizedMessage());
                }
            }
        }
    }

     
    
    /**
     * Permite rotar una imagen seleccionada el numero de grados introducido. 
     * Hace uso del operador AffineTransformOP con la función getRotateInstance
     * @param grados numero de grados a girar
     */
    public void aplicarRotacion(int grados) {
        VentanaInterna vi = (VentanaInterna) (desktop.getSelectedFrame());
        if (vi != null) {
            BufferedImage img = vi.getLienzo().getImg();
            if (img != null) {
                try {
                    AffineTransform at = AffineTransform.getRotateInstance(Math.toRadians(grados), img.getWidth() / 2, img.getHeight() / 2);
                    AffineTransformOp atop = new AffineTransformOp(at, AffineTransformOp.TYPE_BILINEAR);
                    BufferedImage imgdest = atop.filter(img, null);
                    vi.getLienzo().setImg(imgdest);
                    vi.getLienzo().repaint();
                } catch (IllegalArgumentException e) {
                    System.err.println(e.getLocalizedMessage());
                }
            }
        }
    }
    /**
     * 
     * Permite ampliar o reducir una imagen seleccionado en un porcentaje dado.
     * Hace uso de operador AffineTransformOP y la función getScaleInstance
     * @param x valor de tanto por ciento para ampliar x
     * @param y valor de tanto por ciento para ampliar y
     */
    public void aplicarEscalado(double x, double y){
        VentanaInterna vi = (VentanaInterna) (desktop.getSelectedFrame());
        if (vi != null) {
            BufferedImage img = vi.getLienzo().getImg();
            if (img != null) {
                try {
                    AffineTransform at = AffineTransform.getScaleInstance(x, y);                            
                    AffineTransformOp atop = new AffineTransformOp(at, AffineTransformOp.TYPE_BILINEAR);
                    BufferedImage imgdest = atop.filter(img, null);
                    vi.getLienzo().setImg(imgdest);
                    vi.getLienzo().repaint();
                } catch (IllegalArgumentException e) {
                    System.err.println(e.getLocalizedMessage());
                }
            }
        }
        
    }
    /**
     * Método para obtener las bandas de color de una imagen
     * @param img imagen de origen
     * @param banda valor de banda
     * @return BufferedImage nuevo
     */
    public BufferedImage getImageBand(BufferedImage img, int banda) {
        ColorSpace cs = ColorSpace.getInstance(ColorSpace.CS_GRAY);
        ComponentColorModel cm = new ComponentColorModel(cs, false, false,
                Transparency.OPAQUE,
                DataBuffer.TYPE_BYTE);
        int vband[] = {banda};
        WritableRaster bRaster = (WritableRaster) img.getRaster().createWritableChild(0, 0,
                img.getWidth(), img.getHeight(), 0, 0, vband);
        return new BufferedImage(cm, bRaster, false, null);
    }
    
    
    
    
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(VentanaPrincipal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(VentanaPrincipal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(VentanaPrincipal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(VentanaPrincipal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new VentanaPrincipal().setVisible(true);
            }
        });
    }
    
    
    
    
    
    
    
    
    
    
    
    
    

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JComboBox EspacioColor1;
    private javax.swing.JButton Pixel;
    private javax.swing.JButton ShowBandas1;
    private javax.swing.JMenuItem affineTransformOp;
    private javax.swing.JButton b180;
    private javax.swing.JButton b270;
    private javax.swing.JButton b90;
    private javax.swing.JMenuItem bAbrir;
    private javax.swing.JButton bAbrir1;
    private javax.swing.JToggleButton bAlisar;
    private javax.swing.JButton bAmarillo;
    private javax.swing.JButton bAmpliar;
    private javax.swing.JButton bAzul;
    private javax.swing.JButton bBandcombine1;
    private javax.swing.JButton bBlanco;
    private javax.swing.JButton bCamara;
    private javax.swing.JButton bCaptura;
    private javax.swing.JButton bCuadratica1;
    private javax.swing.JCheckBox bDiscontinuidad;
    private javax.swing.JButton bDuplicar;
    private javax.swing.JButton bEcualizacion;
    private javax.swing.JCheckBoxMenuItem bEdicion;
    private javax.swing.JToggleButton bElipse;
    private javax.swing.JButton bFiltro;
    private javax.swing.JToggleButton bGrabar;
    private javax.swing.JMenuItem bGuardar;
    private javax.swing.JButton bGuardar1;
    private javax.swing.JToolBar bHerramientas;
    private javax.swing.JButton bIluminacion;
    private javax.swing.JToggleButton bLinea;
    private javax.swing.JButton bNegro;
    private javax.swing.JButton bNormal;
    private javax.swing.JMenuItem bNuevo;
    private javax.swing.JButton bNuevo1;
    private javax.swing.JButton bOscurecimiento;
    private javax.swing.JButton bPlay;
    private javax.swing.JToggleButton bPunto;
    private javax.swing.JToggleButton bRectangulo;
    private javax.swing.JToggleButton bRelleno;
    private javax.swing.JButton bRojo;
    private javax.swing.JButton bSepia;
    private javax.swing.JToggleButton bStop;
    private javax.swing.JButton bTintado;
    private javax.swing.JButton bTransparencia;
    private javax.swing.JButton bVerde;
    private javax.swing.JLabel barraEstado;
    private javax.swing.JButton bdisminuir;
    private javax.swing.JSlider brillo;
    private javax.swing.JMenuItem colorConvertOp;
    private javax.swing.JComboBox<String> colorRelleno;
    private javax.swing.JComboBox<String> colorTrazo;
    private javax.swing.JMenuItem convolveOp;
    private javax.swing.JDesktopPane desktop;
    private javax.swing.JButton jButton23;
    private javax.swing.JComboBox<File> jComboBox3;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenu jMenu2;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JMenuItem jMenuItem1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JRadioButtonMenuItem jRadioButtonMenuItem1;
    private javax.swing.JRadioButtonMenuItem jRadioButtonMenuItem2;
    private javax.swing.JToolBar.Separator jSeparator1;
    private javax.swing.JToolBar.Separator jSeparator2;
    private javax.swing.JToolBar.Separator jSeparator3;
    private javax.swing.JToolBar.Separator jSeparator5;
    private javax.swing.JToolBar.Separator jSeparator6;
    private javax.swing.JToolBar.Separator jSeparator7;
    private javax.swing.JToolBar.Separator jSeparator8;
    private javax.swing.JToolBar.Separator jSeparator9;
    private javax.swing.JSlider jSlider3;
    private javax.swing.JMenuItem lookupOp;
    private javax.swing.JMenu mImagen;
    private javax.swing.JPanel pImagen1;
    private javax.swing.JPanel pRotacionFija1;
    private javax.swing.JPanel panel1;
    private javax.swing.JPanel panel2;
    private javax.swing.JPanel panel3;
    private javax.swing.JPanel panel4;
    private javax.swing.JPanel panel5;
    private javax.swing.JPanel panel6;
    private javax.swing.JPanel panel7;
    private javax.swing.JSlider posterizacion;
    private javax.swing.JMenuItem rescaleOp;
    private javax.swing.JComboBox seleccionarMascara1;
    private javax.swing.JSlider sliderRotacion1;
    private javax.swing.JLabel tiempo;
    // End of variables declaration//GEN-END:variables
}


